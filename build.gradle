import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id 'maven-publish'
    id 'signing'
    id 'application'
    id 'com.palantir.docker' version '0.25.0'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id "com.github.harbby.gradle.serviceloader" version '1.1.8'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id "org.owasp.dependencycheck" version "8.3.1"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'com.github.jk1.dependency-license-report' version '2.5'
    id "de.undercouch.download" version "5.4.0"
}

group = 'com.exactpro.th2'
version = release_version

kotlin {
    jvmToolchain(11)
}

repositories {
    mavenCentral()

    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    mavenLocal()

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword'))
    }
}

tasks.withType(Sign).configureEach {
    onlyIf {
        project.hasProperty('signingKey') && project.hasProperty('signingPassword')
    }
}

// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
    if (task.name == 'initializeSonatypeStagingRepository' &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url

                scm {
                    url = vcs_url
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
            }
        }
    }

    repositories {
        //Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            url = project.findProperty('nexus_url')

            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
            snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

dependencies {
    api platform('com.exactpro.th2:bom:4.5.0')

    implementation 'com.exactpro.th2:common:5.4.1-dev'
    implementation 'com.exactpro.th2:common-utils:2.2.0-dev'
    implementation('com.exactpro.th2:conn-http-client:2.1.0-dev') {
        because('SslUtils is used')
    }
    implementation 'com.exactpro.th2:grpc-conn:0.1.0-dev'

    implementation 'org.slf4j:slf4j-api'

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: '3.0.5'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.15.2'

    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'com.exactpro.th2:junit-jupiter-integration:0.0.1-master-6956603819-5241ee5-SNAPSHOT'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
}

application {
    mainClass.set('com.exactpro.th2.ws.client.Main')
}

applicationName = 'service'

dockerPrepare {
    dependsOn installDist
}

docker {
    copySpec.from("$buildDir/install")
}

serviceLoader {
    serviceInterface 'com.exactpro.th2.ws.client.api.IHandler'
    serviceInterface 'com.exactpro.th2.ws.client.api.IHandlerSettingsTypeProvider'
}

test {
    useJUnitPlatform {
        excludeTags("integration")
    }
}

tasks.register("integrationTest", Test) {
    dependsOn(serviceLoaderBuild)
    useJUnitPlatform {
        includeTags("integration")
    }
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5
    suppressionFile = file('suppressions.xml')
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [
            new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)
    ]
    renderers = [
            new JsonReportRenderer('licenses.json', false),
    ]
    excludeOwnGroup = false
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}
